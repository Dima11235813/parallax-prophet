# Cursor Rules

These conventions keep work organized and make it easy to trace commits to tasks.

## Task GUID

- Every task file in `prj-mgmt/` must have a `GUID` (UUID v4).
- Reuse this GUID in branch names, commit footers, and PRs.

## Branch Naming

- Use the task GUID in feature branches:
  - `feature/<area-or-scope>/<short-slug>-<GUID>`
  - Example: `feature/camera/reticle-ready-6f2a5d9b-9c24-4d67-8b7e-2a5fcd1ab4e3`

## Commit Messages

- Conventional commits style.
- Add a footer with the task GUID:
  - `task: <GUID>`

## Protected Branches

- Do not commit directly to `main` or `dev`.
- All changes must be committed on a dedicated branch (feature/fix/chore/docs/refactor) that includes the task GUID per the naming rules.
- Open a PR to merge into `dev` (and then into `main` via release or a subsequent PR). Both `dev` and `main` accept changes via PRs only.

## PR Description

- Include `task: <GUID>` and a link to the task file in `prj-mgmt/`.

## Task File Renaming on Done

- When a task status becomes `Done`, rename the task file to include a `done-` prefix and the GUID, keeping the original slug:
  - From: `tasks/<slug>.md`
  - To: `tasks/done-<slug>-<GUID>.md`
  - Example:
    - From: `tasks/add-baseline-packages.md`
    - To: `tasks/done-add-baseline-packages-6f2a5d9b-9c24-4d67-8b7e-2a5fcd1ab4e3.md`

## Architecture (Domain-Driven)

- Maintain a `src/domain/` folder for core domain logic. This code is framework-agnostic and testable.
  - `src/domain/entities/`: entity types and data shapes only. No side effects.
  - `src/domain/helpers/`: pure functions operating on entities. No I/O, no timers, no DOM, no rendering.
- Infrastructure and adapters live outside the domain, e.g., `src/infra/` for rendering, persistence, IO, etc.
  - Keep rendering-specific Three.js code under `src/infra/three/`.
- UI / app shell (`src/main.ts`, components) orchestrates domain and infra. It contains wiring, not business rules.
- New logic should prefer pure functions in domain; pass data in, return data out. Avoid singletons and shared mutable state.
- Unit tests must target domain helpers and entities first; integration tests cover infra and wiring.

## Path Aliases

- Use TypeScript and Vite path aliases to keep imports concise and stable (see `dev-ops/arch.md`, Section 23):
  - `@/*` -> `src/*`
  - `@engine/*` -> `src/engine/*`
  - `@game/*` -> `src/game/*`
  - `@app/*` -> `src/app/*`
  - `@shared/*` -> `src/shared/*`
  - `@domain/*` -> `src/domain/*`
  - `@infra/*` -> `src/infra/*`
- Configured in `tsconfig.json` (`compilerOptions.paths`) and `vite.config.ts` (`resolve.alias`).

## Test Path Conventions

- Unit tests: `src/**/*.test.ts` or `src/**/*.spec.ts` and/or `tests/unit/**/*.{test,spec}.ts`
- Integration tests: `tests/integration/**/*.{test,spec}.ts`
- End-to-end tests: Playwright in `e2e/` (configured via `playwright.config.ts`).

## References

- Style Guide: `STYLEGUIDE.md`
- Branching Strategy: `dev-ops/branching-strategy.md`
